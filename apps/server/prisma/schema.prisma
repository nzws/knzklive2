// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  account        String    @unique @db.VarChar(200)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastSignedInAt DateTime?
  displayName    String?   @db.VarChar(200)
  avatarUrl      String?   @db.VarChar(200)
  config         Json

  tenants     Tenant[]
  lives       Live[]
  comments    Comment[]
  images      Image[]
  invites     Invite[]  @relation("CreatedByUser")
  usedInvites Invite[]  @relation("UsedByUser")
}

model Tenant {
  id          Int      @id @default(autoincrement())
  slug        String   @unique @db.VarChar(50)
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?  @db.VarChar(200)
  config      Json

  owner User @relation(fields: [ownerId], references: [id])

  lives          Live[]
  images         Image[]
  Invite         Invite[]
  CommentAutoMod CommentAutoMod[]
}

model AuthProvider {
  type         AuthProviderType
  domain       String           @id @db.VarChar(100)
  clientId     String           @db.VarChar(100)
  clientSecret String           @db.VarChar(100)
}

// Misskey はアプリの管理が不要なので、ここには登録しない
enum AuthProviderType {
  Mastodon
}

model Live {
  id               Int         @id @default(autoincrement())
  idInTenant       Int
  userId           Int
  tenantId         Int
  createdAt        DateTime    @default(now())
  startedAt        DateTime?
  endedAt          DateTime?
  title            String      @db.VarChar(200)
  description      String?     @db.Text
  privacy          LivePrivacy
  hashtag          String?     @db.VarChar(100)
  sensitive        Boolean     @default(false)
  watchingSumCount Int?
  watchToken       String?     @db.VarChar(100)
  thumbnailId      Int?
  config           Json        @default("{}")
  isDeleted        Boolean     @default(false)
  isRecording      Boolean     @default(false)
  isPushing        Boolean     @default(false)

  user      User           @relation(fields: [userId], references: [id])
  tenant    Tenant         @relation(fields: [tenantId], references: [id])
  thumbnail Image?         @relation(fields: [thumbnailId], references: [id])
  recording LiveRecording?

  comments         Comment[]
  createdImages    Image[]              @relation("LiveCreatedImages")
  streamProgresses LiveStreamProgress[]

  @@unique([idInTenant, tenantId])
}

enum LivePrivacy {
  Public
  Private
  Hidden
}

model LiveStreamProgress {
  id        Int       @id @default(autoincrement())
  liveId    Int
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  live Live @relation(fields: [liveId], references: [id])

  @@index([liveId, startedAt])
}

enum LiveRecordingStatus {
  NotFound
  Processing
  Completed
  Failed
  Deleted
}

model LiveRecording {
  id             Int                 @id
  originalUrl    String?             @db.VarChar(200)
  originalStatus LiveRecordingStatus @default(NotFound)
  originalSize   BigInt?
  originalCompletedAt DateTime?
  cacheStatus  LiveRecordingStatus @default(NotFound)
  cacheSize      BigInt?
  cacheCompletedAt DateTime?
  watchCount     Int                 @default(0)

  live Live @relation(fields: [id], references: [id])
}

model Image {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  url           String      @db.VarChar(200)
  userId        Int
  tenantId      Int
  type          ImageType
  bucket        ImageBucket
  isDeleted     Boolean     @default(false)
  createdLiveId Int?

  user        User   @relation(fields: [userId], references: [id])
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  createdLive Live?  @relation(name: "LiveCreatedImages", fields: [createdLiveId], references: [id])

  lives Live[]

  @@index([type, tenantId, isDeleted, createdAt])
}

enum ImageType {
  Thumbnail
  CustomThumbnail
}

enum ImageBucket {
  Static
}

model Comment {
  id        Int      @id @default(autoincrement())
  liveId    Int
  userId    Int
  createdAt DateTime @default(now())
  content   String   @db.Text
  sourceUrl String?  @db.VarChar(200)
  sourceId  String?  @db.VarChar(100)
  isDeleted Boolean  @default(false)
  isHidden  Boolean  @default(false)

  live Live @relation(fields: [liveId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([liveId, sourceUrl, sourceId])
  @@index([liveId, createdAt, isDeleted])
}

enum CommentAutoModType {
  Account
  Domain
  Text
}

model CommentAutoMod {
  id        Int                @id @default(autoincrement())
  tenantId  Int
  createdAt DateTime           @default(now())
  type      CommentAutoModType
  value     String             @db.VarChar(200)
  temporary Boolean            @default(false) // 配信終了時に削除

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model Invite {
  inviteId    String    @id @db.VarChar(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById Int?
  usedById    Int?
  tenantId    Int?
  usedAt      DateTime?

  createdBy User?   @relation("CreatedByUser", fields: [createdById], references: [id])
  usedBy    User?   @relation("UsedByUser", fields: [usedById], references: [id])
  tenant    Tenant? @relation(fields: [tenantId], references: [id])
}
